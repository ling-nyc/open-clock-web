// Code generated by jtd-codegen for TypeScript v0.2.0

export interface ClockWrapper {
  clockStandard: ClockStandard;
  assets?: ClockAsset[];
  images?: any[];
}

export interface ClockAsset {
  filename: string;
  hasTransparency: boolean;
  imageData: string;
}

export enum ClockLayerType {
  BatteryIndicator = 'batteryIndicator',
  DataBar = 'dataBar',
  DataLabel = 'dataLabel',
  DataRing = 'dataRing',
  DateTime = 'dateTime',
  Hand = 'hand',
  Icon = 'icon',
  Image = 'image',
  Text = 'text',
}

export interface ClockLayer {
  /**
   * transparency
   */
  alpha: string;

  /**
   * rotation of the overall layer
   */
  angleOffset: string;

  /**
   * each layer can have user generated names or empty
   */
  customName: string;

  /**
   * fill color ( re used for public various types )
   */
  fillColor: string;

  /**
   * 0 is center : negative left
   */
  horizontalPosition: string;

  /**
   * filenames for images used in the layer
   */
  imageFilename: string;

  /**
   * hide this layer
   */
  isHidden: boolean;

  /**
   * 1.0 is normal
   */
  scale: string;
  type: ClockLayerType;

  /**
   * 0 is center : negative up
   */
  verticalPosition: string;

  /**
   * 0 is bottom higher is top. layering
   */
  zIndex: number;
  dataBarOptions?: any;
  dataLabelOptions?: any;
  dataRingOptions?: any;
  handOptions?: ClockLayerHandOptions;
  iconOptions?: any;
  textOptions?: ClockLayerTextOptions;
  weatherOptions?: any;
}

export interface ClockLayerHandOptions {
  /**
   * used usually in combination with images that have numbers to animate in
   * reverse to show numbers increasing for time
   */
  animateClockwise: boolean;
  handStyle: string;

  /**
   * localized text description of the hand style
   */
  handStyleDescription: string;
  handType: ClockLayerHandTypes;

  /**
   * when using images the anchor position ( bottom / centered of the image )
   * default: 0.5
   */
  imageAnchorX: string;

  /**
   * when using images the anchor position ( bottom / centered of the image )
   * default: 0.5
   */
  imageAnchorY: string;

  /**
   * use images instead of vectors
   */
  useImage: boolean;
}

export enum ClockLayerHandTypes {
  Hour = 'hour',
  Minute = 'minute',
  Second = 'second',
}

export enum ClockLayerTextCasing {
  Lower = 'lower',
  None = 'none',
  Sentence = 'sentence',
  Uppercased = 'uppercased',
  Word = 'word',
}

export enum ClockLayerTextJustification {
  Centered = 'centered',
  Left = 'left',
  Right = 'right',
}

export enum ClockLayerTextOptionsDateTimeFormat {
  City = 'City',
  Colon = 'Colon',
  Country = 'Country',
  Da = 'DA',
  Dadd = 'DADD',
  Dd = 'DD',
  Ddauto = 'DDAuto',
  Ddmm = 'DDMM',
  Dl = 'DL',
  Dw = 'DW',
  Dy = 'DY',
  Hh = 'HH',
  Hhmm = 'HHMM',
  Hhmmpm = 'HHMMPM',
  Hhmmss = 'HHMMSS',
  HourWord = 'HourWord',
  HourWordUnit = 'HourWordUnit',
  Ml = 'ML',
  Mm = 'MM',
  Mmdd = 'MMDD',
  Mn = 'MN',
  Mo = 'MO',
  MinuteWord = 'MinuteWord',
  MinuteWordUnit = 'MinuteWordUnit',
  Pm = 'PM',
  Ss = 'SS',
  SecondsWord = 'SecondsWord',
  SecondsWordUnit = 'SecondsWordUnit',
  Slash = 'Slash',
  Wy = 'WY',
  Yy = 'YY',
  Yyyy = 'YYYY',
}

export interface ClockLayerTextOptions {
  casingType: ClockLayerTextCasing;

  /**
   * designer entered text to show in label
   */
  customText: string;
  dateTimeFormatDescription: string;

  /**
   * will be specific to platforms, might want to ignore
   */
  effectType: string;
  fontDescription: string;
  fontFilename: string;
  justification: ClockLayerTextJustification;

  /**
   * added as adv option, probably ignore
   */
  kerning: string;

  /**
   * color for outline
   */
  outlineColor: string;

  /**
   * pixels to show as outline on the text
   */
  outlineWidth: string;
  dateTimeFormat?: ClockLayerTextOptionsDateTimeFormat;
  fontFamily?: string;
}

export interface ClockStandard {
  layers: ClockLayer[];
  title: string;

  /**
   * always 1.0
   */
  version: '1.0';
}
